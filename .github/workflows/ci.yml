name: CI

defaults:
  run:
    shell: pwsh

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

  release:
    types: [ published ]

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.upload-unsigned-artifact.outputs.artifact-id }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          $version = '${{ github.ref_type }}' -eq 'tag' -and '${{ github.ref_name }}' -like 'v*' ?
            '${{ github.ref_name }}'.SubString(1) : '0.0.1'
          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Get version
        run: |
          echo ${{ steps.version.outputs.version }}

      - name: .NET Build
        run: dotnet pack --output out

      - name: Create module
        run: |
          New-Item ./out/AnyPackage -ItemType Directory
          $settings = Import-PowerShellDataFile ./BuildSettings.psd1
          Copy-Item @settings

      - name: Upload unsigned artifact
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-artifact
          path: out

  Test:
    needs: Build
    strategy:
      matrix:
          os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download module
        uses: actions/download-artifact@v4
        with:
          name: unsigned-artifact
          path: unsigned-artifact

      - name: Move module
        run: |
          if ($IsWindows) {
            $path = "$HOME\Documents\PowerShell\Modules"
          } else {
            $path = "$HOME/.local/share/powershell/Modules"
          }

          if (-not (Test-Path $path)) {
            New-Item $path -ItemType Directory
          }

          Move-Item ./unsigned-artifact/AnyPackage $path

      - name: Test with Pester
        run: |
          $ht = Import-PowerShellDataFile PesterSettings.psd1
          $config = New-PesterConfiguration $ht
          Invoke-Pester -Configuration $config

  Sign:
    needs: [Build, Test]
    env:
      SIGNPATH_SIGNING_POLICY_SLUG: | 
        ${{ (github.event_name == 'release' && github.event.action == 'published') 
          && 'release-signing' || 'test-signing' }}
    runs-on: ubuntu-latest
    steps:
      - name: Sign
        uses: signpath/github-action-submit-signing-request@v0.4
        with:
          api-token: ${{ secrets.SIGNPATH_API_TOKEN }}
          organization-id: ${{ vars.SIGNPATH_ORGANIZATION_ID }}
          project-slug: AnyPackage
          signing-policy-slug: ${{ env.SIGNPATH_SIGNING_POLICY_SLUG }}
          github-artifact-id: ${{ needs.Build.outputs.artifact-id }}
          wait-for-completion: true
          output-artifact-directory: signed-artifact

      - name: Update module with signed artifact
        run: |
          Expand-Archive .\signed-artifact\AnyPackage*.nupkg
          Copy-Item ./AnyPackage*/lib/netstandard2.0/AnyPackage.dll -Destination ./signed-artifact/AnyPackage

      - name: Upload signed artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-artifact
          path: signed-artifact
          if-no-files-found: error

  Publish:
    needs: Sign
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
      - name: Download module
        uses: actions/download-artifact@v4
        with:
          name: signed-artifact
          path: signed-artifact

      - name: Move module
        run: |
          Move-Item ./out/AnyPackage ~/.local/share/powershell/Modules

      - name: Publish NuGet package
        env:
          NUGET_ORG_KEY: ${{ secrets.NUGET_ORG_KEY }}
        run: dotnet nuget push ./signed-artifact/*.nupkg --api-key $env:NUGET_ORG_KEY --source https://api.nuget.org/v3/index.json

      - name: Publish Module
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        run: Publish-Module -Name AnyPackage -NuGetApiKey $env:NUGET_KEY
